{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('input#datetime-picker');\nconst display = document.querySelector('.timer');\nconst startBtn = document.querySelector('[data-start]');\n\nstartBtn.addEventListener('click', onClick);\n\nlet userDate;\n\nfunction onClick(e) {\n  userDate = new Date(input.value).getTime();\n  const intervalId = setInterval(() => {\n    const currentDate = Date.now();\n    const diff = userDate - currentDate;\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    addLeadingZero(days, hours, minutes, seconds);\n    if (diff <= 1000) {\n      clearInterval(intervalId);\n    }\n  }, 1000);\n}\n\nfunction addLeadingZero(days, hours, minutes, seconds) {\n  display.querySelector('[data-days]').textContent = String(days).padStart(\n    2,\n    '0'\n  );\n  display.querySelector('[data-hours]').textContent = String(hours).padStart(\n    2,\n    '0'\n  );\n  display.querySelector('[data-minutes]').textContent = String(\n    minutes\n  ).padStart(2, '0');\n  display.querySelector('[data-seconds]').textContent = String(\n    seconds\n  ).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < options.defaultDate) {\n      return alert('Please choose a date in the future');\n    }\n    userSelectedDate = selectedDates[0];\n    console.log(selectedDates[0]);\n  },\n};\n\nflatpickr(input, options);\n"],"names":["input","display","startBtn","onClick","userDate","e","intervalId","currentDate","diff","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","options","selectedDates","flatpickr"],"mappings":"wIAKA,MAAMA,EAAQ,SAAS,cAAc,uBAAuB,EACtDC,EAAU,SAAS,cAAc,QAAQ,EACzCC,EAAW,SAAS,cAAc,cAAc,EAEtDA,EAAS,iBAAiB,QAASC,CAAO,EAE1C,IAAIC,EAEJ,SAASD,EAAQE,EAAG,CAClBD,EAAW,IAAI,KAAKJ,EAAM,KAAK,EAAE,QAAO,EACxC,MAAMM,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAOJ,EAAWG,EAClB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxDM,EAAeL,EAAMC,EAAOC,EAASC,CAAO,EACxCJ,GAAQ,KACV,cAAcF,CAAU,CAE3B,EAAE,GAAI,CACT,CAEA,SAASQ,EAAeL,EAAMC,EAAOC,EAASC,EAAS,CACrDX,EAAQ,cAAc,aAAa,EAAE,YAAc,OAAOQ,CAAI,EAAE,SAC9D,EACA,GACJ,EACER,EAAQ,cAAc,cAAc,EAAE,YAAc,OAAOS,CAAK,EAAE,SAChE,EACA,GACJ,EACET,EAAQ,cAAc,gBAAgB,EAAE,YAAc,OACpDU,CACJ,EAAI,SAAS,EAAG,GAAG,EACjBV,EAAQ,cAAc,gBAAgB,EAAE,YAAc,OACpDW,CACJ,EAAI,SAAS,EAAG,GAAG,CACnB,CAEA,SAASC,EAAUE,EAAI,CAQrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAE1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EAEpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EAEjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIC,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAI/B,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,EAAID,EAAQ,YAC7B,OAAO,MAAM,oCAAoC,EAEhCC,EAAc,CAAC,EAClC,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC7B,CACH,EAEAC,EAAUlB,EAAOgB,CAAO"}